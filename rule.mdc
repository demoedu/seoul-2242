---
description:
globs:
alwaysApply: true
---

# AI 디버깅 마인드셋 규칙 파일

**문서 정보:**

- **제목:** 디버깅 마인드셋: 고수들의 행동 패턴 기반 AI 디버깅 규칙
- **저자:** 배휘동(XL8)님의 '디버깅 마인드셋' 자료 기반
- **버전:** 1.0
- **설명:** 디버깅을 학습 가능한 기술로 간주하고, 고수들의 인지적 작업과 5단계 원인 파악 가이드를 따라 문제를 해결하는 AI 에이전트를 위한 규칙 집합입니다.

---

## 1. 핵심 원칙

- **디버깅은 마법이 아닌 기술:** 디버깅은 신비한 과정이 아니라, 트릭을 알고 손기술을 익히면 누구나 배울 수 있는 기술로 접근한다. 고수들의 인지적 작업이 담긴 행동 패턴을 학습하고 체화하여 디버깅 역량을 증진시킨다.
- **전문성의 핵심: 원인 파악:** 디버깅 과정은 '원인 파악', '문제 해결', '사후 처리'의 3단계로 구성되며, 이 중 **'원인 파악'이 디버깅 전문성의 핵심**임을 인지하고 최우선으로 집중한다.
- **심적 표상 구축 및 활용:** 정보를 이해, 기억, 분석, 활용해 올바른 결정을 내리도록 돕는 '심적 표상' (마음속 지식 구조)을 구축한다. 매 디버깅마다 심적 표상을 갱신하며 패턴 인식과 의사결정 효율을 높인다. 이 표상에는 정상적인 컴포넌트의 동작 조건, 정상임을 알려주는 신호, 테스트 방법, 일반적인 문제 현상의 원인, 해결 방법 등에 대한 지식이 포함된다.

---

## 2. 디버깅 단계별 규칙

### 2.1. 원인 파악 (Cause Identification)

문제를 진단하고 근본 원인을 찾아내는 과정으로, 5단계 가이드에 따라 수행한다. 이 과정은 **반복적**으로 이루어질 수 있으며, 각 단계에 대한 **사전 계획** 수립(예: 시간 분배)과 **사후 회고**(적절하게 멈추고 회고하기)를 통해 지속적으로 개선한다.

#### 2.1.1. 1단계: 문제 정의 (Define the Problem)

- **목표:** 현재 풀고자 하는 문제가 무엇인지 명확한 '이정표'를 설정한다.
- **액션:**
  - 사용자 리포트, 에러 로그 등을 통해 문제 현상을 파악하고, '자막 에디터에서 특정 단축키가 Windows OS에서 동작하지 않음'과 같이 구체적으로 정의한다.
  - 문제를 다른 시스템/컴포넌트와 분리하여 집중한다.
  - 이 이정표는 작업 계획 수립, 중간 회고 시 메타인지 활성화, 타인과의 문제 공유에 활용되며, 중요하지 않은 문제에 시간을 허비하는 것을 방지한다.
- **사례:** '자막 에디터에서 특정 단축키가 동작하지 않는다'는 사용자 리포트 발생. 사용자 OS가 Windows임을 확인하고, PM의 Windows 컴퓨터에서 재현 성공. Windows에서 CTRL+DIGIT으로 기본 설정된 단축키들이 동작하지 않는 것이 풀어야 할 문제로 정의됨.

#### 2.1.2. 2단계: 정상 동작 정의 (Define Normal Behavior)

- **목표:** 정상적인 환경에서 어떤 조건, 순서, 결과로 동작해야 하는지에 대한 '심적 표상'을 구축한다.
- **액션:**
  - 현재 관찰되는 정보와 이미 알고 있는 지식을 바탕으로 '올바른 동작'을 Given, When, Then 형식의 테스트 코드처럼 정의한다.
  - 올바른 동작을 정의하기 어렵다면, 기존 문서, 코드, 동료와의 논의, 구글링, ChatGPT 활용 등 여러 소스에서 추가 정보를 수집하여 보완한다.
  - 최소 재현 환경 구축 단계에서 새로운 패턴이 발견되면 이 단계를 갱신하여 심적 표상을 업데이트할 수 있다.
- **사례:**
  - **알고 있는 정보:** 'split' 액션은 자막을 쪼개며, 기본 단축키는 Mac과 Windows에서 CTRL+1로 동일하다. Mac Chrome에서는 동작하나 Windows Chrome에서는 안 된다. Windows에서 모든 단축키가 안 되는 것은 아니며, CTRL+DIGIT 단축키들만 문제다. 'split'을 다른 단축키로 덮어쓰거나, CTRL+1로 재지정해도 동작한다.
  - **Given, When, Then 정의:**
    - **Given:** OS 및 기본 단축키 덮어쓰기 여부와 상관없이.
    - **When:** split 단축키를 누르면.
    - **Then:** 자막 쪼개짐(SubtitleSplitted) 이벤트가 발생하고, 서버와 동기화하는 Worker가 호출되며, 실제로 자막이 2개로 쪼개져야 한다.
  - **심적 표상 갱신 사례 (3단계 이후):** OS와 상관없이 기본 단축키를 덮어쓰면, `localStorage`의 `shortcutOverrides` 배열에 해당 기능에 대한 요소가 1개만 저장되어야 한다.

#### 2.1.3. 3단계: 최소 재현 환경 구축하며 관찰 (Establish Minimum Reproduction Environment & Observe)

- **목표:** 문제가 있는 부분을 핀포인트하여 격리하고, 직접 재현을 시도하며 패턴을 관찰한다.
- **액션:**
  - 문제가 100% 재현되는 최소한의 환경을 구축한다.
  - 조건을 무조건 참으로 만들거나, 정상 동작할 때까지 하나씩 요소를 제거하거나, 빈 프로젝트에서 시작하여 비정상이 될 때까지 요소를 추가하며 격리한다.
  - 문제 발생 시점을 정확히 확인하고 (에러 모니터링, Git, Slack), 사용자 환경과 동작을 따라하며(세션 리플레이) 패턴을 관찰한다.
  - 재현이 안 될 경우, 로그 심기, 사용자 인터뷰 등의 방법으로 재현 조건 파악을 위한 추가 정보를 수집한다.
- **사례:**
  - Windows 노트북 + 스테이징 환경에서 기본 단축키 설정 후, CTRL+1을 누르니 'split' 기능이 100% 안 되는 것을 확인 (100% 재현).
  - "덮어쓰면 동작한다"는 패턴에 집중. 덮어쓰면 `localStorage`에 덮어쓴 단축키 정보가 저장됨.
  - Mac에서는 `localStorage`가 예상대로 갱신되는데, Windows에서는 `shortcutOverrides` 배열에 2개 아이템이 생기는 것을 발견. `ClicheFunctionMenuItem`이 문제임을 파악. 이 관찰을 통해 2단계의 '정상 동작 정의'를 갱신한다.

#### 2.1.4. 4단계: 차이를 발생시키는 다양한 원인 탐색 (Explore Various Causes for Differences)

- **목표:** 정상 동작 정의(2단계)와 현재 문제 발생 환경(3단계)의 차이가 어디에서 왔는지, 머릿속 지식 지도(심적 표상)를 활용하여 추상적이거나 구체적인 다양한 원인을 탐색하고 나열한다.
- **액션:**
  - 도메인 경험이 많다면 첫 번째 옵션이 진실일 가능성이 높지만, 훈련을 위해 최소 3개 이상의 옵션을 적어보는 것을 권장한다.
  - 다양한 옵션을 찾기 어렵다면 구글링, Git 이력, 동료에게 설명하기, ChatGPT 활용, 산책하기 등의 방법으로 추가 정보를 수집한다.
- **사례:** 덮어쓸 때 두 OS의 동작 차이가 어디에서 왔을까? **가설 1:** 두 OS의 디폴트 단축키가 다르다. Windows에서만 `ClicheFunction`의 기본 단축키가 CTRL+1로 설정되어 있던 것은 아닐까?. 이 경우, 다른 옵션을 찾을 필요 없이 바로 다음 단계로 넘어갈 수 있다.

#### 2.1.5. 5단계: 가설 설정 및 검증 (Formulate & Verify Hypotheses)

- **목표:** 탐색된 원인들을 '검증 가능한 가설' 형태로 문장화하고, 실제로 변경을 가하면서 현상이 변하는지 관찰하여 검증한다.
- **액션:**
  - 가설을 "A가 B로 되어있는 게 C 현상의 원인이라면, B를 B'로 변경했을 때 C가 C'로 바뀌어야 한다"와 같은 형태로 문장화한다.
  - 실제로 작은 변경을 가하면서 가설대로 현상이 변하는지 관찰하여 검증한다.
  - **주의:** 검증 과정에서 문제가 전이되면, 시간을 다시 잡고 1단계부터 재시작한다.
  - 가설이 틀렸다면 (오히려 좋음) 그 이유를 기록하고 다음 가설로 넘어간다.
  - 끝내 원인 파악이 안 된다면, 구글링, ChatGPT, 동료에게 도움 받기, 산책하기 등의 방법으로 추가 정보를 수집한다.
- **사례:**
  - **가설:** "같은 디폴트 단축키로 2개 기능이 매핑되어 있으면, 덮어쓸 때 `localStorage`에 2개 아이템이 생길 것이다".
  - **검증:**
    - Windows에서 `ClicheFunction1~9`의 디폴트 단축키가 CTRL+1~9에 매핑되어 있었음을 확인.
    - Mac에서 해당 기능이 CMD+1~9에 매핑되어 있었는데, 이를 CTRL로 바꿔 덮어쓰니 `localStorage`에 아이템 2개가 생김.
    - 반대로 Windows에서 기본 단축키를 바꿔 덮어쓰니 아이템 1개만 생김.
  - **근본 원인 파악 (코드 상의 원인):**
    - 에디터는 단축키에 대한 콜백이 2개 있으면 뒤의 것이 앞의 것을 덮어쓴다.
    - `ClicheFunction`은 코드 순서상 뒤에 등록된 콜백이라 CTRL+1을 하면 `ClicheFunction1`이 동작한다.
    - `ClicheFunction`은 사용자가 지정해둔 텍스트를 붙여넣는 기능인데, 디폴트로 텍스트가 비어있어 단축키를 눌러도 아무 동작도 안 하는 것처럼 보였다.
  - **실수 발생 원인:**
    - 이전에 디폴트 단축키를 정리하고 변경하는 과정에서 생긴 실수.
    - `ClicheFunction`은 다른 기능과 달리 숫자 키 전체에 대해 동적으로 기능 및 기본 단축키를 추가해주고 있었기 때문에, 텍스트 서치로 겹치는 단축키를 찾지 못했다.
    - 당시 Windows에서의 테스트를 소홀히 했고, 단축키가 겹쳤다는 것을 인지하지 못했다.

### 2.2. 문제 해결 (Problem Solving)

- **목표:** 원인 파악 후, 해당 문제를 해결하기 위한 조치를 수행한다.
- **액션:**
  - 파악된 원인을 바탕으로 문제 해결을 위한 구체적인 방법을 설계한다 (예: 단축키 중복 해결, 캐시 갱신 로직 수정 등).
  - 설계된 해결법의 투자 대비 효과(ROI)를 파악하고, 해결의 우선순위를 결정한다.

### 2.3. 사후 처리 (Post-processing)

- **목표:** 문제를 해결한 후 재발 방지 및 학습을 위한 단계를 수행한다.
- **액션:**
  - 문제가 실제로 해결되었는지 확인하고, 관련 테스트 케이스를 추가하거나 업데이트한다.
  - 디버깅 과정을 회고하여, 심적 표상을 갱신하고 향후 유사 문제 발생 시 더 효율적으로 대처할 수 있도록 학습한다.

---

## 3. 일반 가이드라인

- **도구 활용:**
  - 좋은 디버깅 도구(예: 크롬 디버거)의 존재를 알고, 상황에 맞게 선택하며, 능숙하게 사용하고, 도구에서 오는 잘못된 신호를 잘 파악한다.
  - 가장 중요한 인지적 도구는 디버깅 마인드셋 자체이며, 가장 중요한 실용적 도구는 상황에 맞는 디버거이다.
- **고수들의 습관:**
  - TDD (Test-Driven Development - 혹은 Toilet Driven Development), DDD (Description Driven Development for PRs), IDD (Issue Driven Development)와 같은 습관을 통해 문제 해결 역량을 강화한다.
